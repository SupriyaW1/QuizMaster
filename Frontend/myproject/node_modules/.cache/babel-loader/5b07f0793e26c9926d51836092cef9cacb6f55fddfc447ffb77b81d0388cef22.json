{"ast":null,"code":"var _jsxFileName = \"D:\\\\QuizMaster\\\\Frontend\\\\myproject\\\\src\\\\components\\\\StartQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StartQuiz = ({\n  exam\n}) => {\n  _s();\n  const [quizData, setQuizData] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [markedForReview, setMarkedForReview] = useState({});\n  const handleReset = index => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[index] = {\n      ...updatedSelectedAnswers[index],\n      selectedOption: null\n    };\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  useEffect(() => {\n    fetchQuizData();\n  }, []);\n  const fetchQuizData = () => {\n    fetch(`http://localhost:8080/viewQuizBy?cat_id=${exam.cat_id.cat_id}&subject_id=${exam.subject_id.subject_id}`).then(resp => {\n      if (!resp.ok) throw new Error(\"Server error\");\n      return resp.json();\n    }).then(data => {\n      setQuizData(data);\n    }).catch(error => {\n      console.error('Error fetching quiz questions:', error);\n    });\n  };\n  const displayQuestions = () => {\n    return quizData.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question_${index}`,\n          value: option,\n          checked: selectedAnswers[`question_${index}`] === option,\n          onChange: () => handleAnswerChange(index, option)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this))]\n    }, question._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this));\n  };\n  const handleAnswerChange = (questionIndex, option) => {\n    setSelectedAnswers({\n      ...selectedAnswers,\n      [`question_${questionIndex}`]: option\n    });\n  };\n  const saveStudentAnswers = () => {\n    const studentAnswers = {\n      exam_id: exam.exam_id,\n      student_id: exam.student_id,\n      answers: selectedAnswers\n    };\n    fetch('http://localhost:8080/saveStudentAnswers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(studentAnswers)\n    }).then(response => {\n      if (response.ok) {\n        alert('Student answers saved successfully.');\n      } else {\n        throw new Error('Failed to save student answers.');\n      }\n    }).catch(error => {\n      console.error('Error saving student answers:', error);\n      alert('Failed to save student answers. Please try again later.');\n    });\n  };\n  const clearSelectedAnswers = () => {\n    setSelectedAnswers({});\n    alert('Answers cleared successfully.');\n  };\n  const markForReview = () => {\n    // Implement marking question for review\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Start Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: quizData.length > 0 ? displayQuestions() : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 61\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveStudentAnswers,\n      children: \"Save Student Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearSelectedAnswers,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: markForReview,\n      children: \"Mark for Review\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(StartQuiz, \"40vma0UCR+inwGSJbz08NAoMCDg=\");\n_c = StartQuiz;\nexport default StartQuiz;\nvar _c;\n$RefreshReg$(_c, \"StartQuiz\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","StartQuiz","exam","_s","quizData","setQuizData","selectedAnswers","setSelectedAnswers","markedForReview","setMarkedForReview","handleReset","index","updatedSelectedAnswers","selectedOption","fetchQuizData","fetch","cat_id","subject_id","then","resp","ok","Error","json","data","catch","error","console","displayQuestions","map","question","children","fileName","_jsxFileName","lineNumber","columnNumber","options","option","optionIndex","type","name","value","checked","onChange","handleAnswerChange","_id","questionIndex","saveStudentAnswers","studentAnswers","exam_id","student_id","answers","method","headers","body","JSON","stringify","response","alert","clearSelectedAnswers","markForReview","length","onClick","_c","$RefreshReg$"],"sources":["D:/QuizMaster/Frontend/myproject/src/components/StartQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst StartQuiz = ({ exam }) => {\r\n    const [quizData, setQuizData] = useState([]);\r\n    const [selectedAnswers, setSelectedAnswers] = useState({});\r\n    const [markedForReview, setMarkedForReview] = useState({});\r\n    const handleReset = (index) => {\r\n      const updatedSelectedAnswers = [...selectedAnswers];\r\n      updatedSelectedAnswers[index] = { ...updatedSelectedAnswers[index], selectedOption: null };\r\n      setSelectedAnswers(updatedSelectedAnswers);\r\n  };\r\n    useEffect(() => {\r\n        fetchQuizData();\r\n    }, []);\r\n\r\n    const fetchQuizData = () => {\r\n        fetch(`http://localhost:8080/viewQuizBy?cat_id=${exam.cat_id.cat_id}&subject_id=${exam.subject_id.subject_id}`)\r\n            .then(resp => {\r\n                if (!resp.ok) throw new Error(\"Server error\");\r\n                return resp.json();\r\n            })\r\n            .then(data => {\r\n                setQuizData(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching quiz questions:', error);\r\n            });\r\n    };\r\n\r\n    const displayQuestions = () => {\r\n        return quizData.map((question, index) => (\r\n            <div key={question._id}>\r\n                <p>{question.question}</p>\r\n                {question.options.map((option, optionIndex) => (\r\n                    <div key={optionIndex}>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name={`question_${index}`}\r\n                            value={option}\r\n                            checked={selectedAnswers[`question_${index}`] === option}\r\n                            onChange={() => handleAnswerChange(index, option)}\r\n                        />\r\n                        <label>{option}</label>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    const handleAnswerChange = (questionIndex, option) => {\r\n        setSelectedAnswers({\r\n            ...selectedAnswers,\r\n            [`question_${questionIndex}`]: option\r\n        });\r\n    };\r\n\r\n    const saveStudentAnswers = () => {\r\n        const studentAnswers = {\r\n            exam_id: exam.exam_id,\r\n            student_id: exam.student_id,\r\n            answers: selectedAnswers\r\n        };\r\n        fetch('http://localhost:8080/saveStudentAnswers', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(studentAnswers)\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                alert('Student answers saved successfully.');\r\n            } else {\r\n                throw new Error('Failed to save student answers.');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error saving student answers:', error);\r\n            alert('Failed to save student answers. Please try again later.');\r\n        });\r\n    };\r\n\r\n    const clearSelectedAnswers = () => {\r\n        setSelectedAnswers({});\r\n        alert('Answers cleared successfully.');\r\n    };\r\n\r\n    const markForReview = () => {\r\n        // Implement marking question for review\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Start Quiz</h1>\r\n            <div>\r\n                {quizData.length > 0 ? displayQuestions() : <p>Loading...</p>}\r\n            </div>\r\n            <button onClick={saveStudentAnswers}>Save Student Answers</button>\r\n            <button onClick={clearSelectedAnswers}>Clear</button>\r\n            <button onClick={markForReview}>Mark for Review</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}