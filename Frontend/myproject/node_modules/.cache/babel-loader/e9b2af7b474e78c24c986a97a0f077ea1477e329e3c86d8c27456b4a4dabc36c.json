{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n\n  // Validate form fields\n  let valid = true;\n  if (formData.username.trim() === \"\") {\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      username: \"Username is required.\"\n    }));\n    valid = false;\n  }\n  if (formData.password.trim() === \"\") {\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      password: \"Password is required.\"\n    }));\n    valid = false;\n  }\n  if (valid) {\n    try {\n      const response = await fetch(\"http://localhost:8080/checkUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log(\"Login successful\");\n        window.location.href = \"/adminHome\"; // Redirect to adminHome page on successful login\n      } else {\n        console.error(\"Login failed\");\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          loginError: \"Invalid username or password.\"\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error logging in:\", error);\n      // Handle error\n    }\n\n    // Reset form data\n    setFormData({\n      username: \"\",\n      password: \"\"\n    });\n  }\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","valid","formData","username","trim","setErrors","prevErrors","password","response","fetch","method","headers","body","JSON","stringify","ok","console","log","window","location","href","error","loginError","setFormData"],"sources":["D:/QuizMaster/Frontend/myproject/src/Components/login.js"],"sourcesContent":["const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n\r\n  // Validate form fields\r\n  let valid = true;\r\n  if (formData.username.trim() === \"\") {\r\n    setErrors((prevErrors) => ({\r\n      ...prevErrors,\r\n      username: \"Username is required.\",\r\n    }));\r\n    valid = false;\r\n  }\r\n  if (formData.password.trim() === \"\") {\r\n    setErrors((prevErrors) => ({\r\n      ...prevErrors,\r\n      password: \"Password is required.\",\r\n    }));\r\n    valid = false;\r\n  }\r\n\r\n  if (valid) {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/checkUser\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log(\"Login successful\");\r\n        window.location.href = \"/adminHome\"; // Redirect to adminHome page on successful login\r\n      } else {\r\n        console.error(\"Login failed\");\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          loginError: \"Invalid username or password.\",\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error logging in:\", error);\r\n      // Handle error\r\n    }\r\n\r\n    // Reset form data\r\n    setFormData({\r\n      username: \"\",\r\n      password: \"\",\r\n    });\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;;EAElB;EACA,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,QAAQ,CAACC,QAAQ,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACnCC,SAAS,CAAEC,UAAU,KAAM;MACzB,GAAGA,UAAU;MACbH,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IACHF,KAAK,GAAG,KAAK;EACf;EACA,IAAIC,QAAQ,CAACK,QAAQ,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACnCC,SAAS,CAAEC,UAAU,KAAM;MACzB,GAAGA,UAAU;MACbC,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IACHN,KAAK,GAAG,KAAK;EACf;EAEA,IAAIA,KAAK,EAAE;IACT,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAIM,QAAQ,CAACO,EAAE,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,YAAY,CAAC,CAAC;MACvC,CAAC,MAAM;QACLJ,OAAO,CAACK,KAAK,CAAC,cAAc,CAAC;QAC7BhB,SAAS,CAAEC,UAAU,KAAM;UACzB,GAAGA,UAAU;UACbgB,UAAU,EAAE;QACd,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC;IACF;;IAEA;IACAE,WAAW,CAAC;MACVpB,QAAQ,EAAE,EAAE;MACZI,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}