{"ast":null,"code":"var _jsxFileName = \"D:\\\\QuizMaster\\\\Frontend\\\\myproject\\\\src\\\\components\\\\AttemptQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AttemptQuiz = () => {\n  _s();\n  // Sample quiz data (replace with your actual quiz data)\n  const quizData = [{\n    id: 1,\n    question: 'Sample Question 1',\n    options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\n    correctAnswer: 2 // Index of the correct answer in the options array\n  }, {\n    id: 2,\n    question: 'Sample Question 2',\n    options: ['Option A', 'Option B', 'Option C', 'Option D'],\n    correctAnswer: 1\n  }\n  // Add more quiz questions as needed\n  ];\n  const [selectedOptions, setSelectedOptions] = useState(Array(quizData.length).fill(null));\n  const [remainingTime, setRemainingTime] = useState(30 * 60); // 30 minutes in seconds\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setRemainingTime(prevTime => prevTime - 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  const handleOptionSelect = (questionIndex, optionIndex) => {\n    const updatedSelectedOptions = [...selectedOptions];\n    updatedSelectedOptions[questionIndex] = optionIndex;\n    setSelectedOptions(updatedSelectedOptions);\n  };\n  const handleSubmitQuiz = () => {\n    // Perform submission logic here\n    console.log('Submitting quiz...');\n    // Show confirmation popup\n    if (window.confirm('Are you sure you want to submit the quiz?')) {\n      // Submit quiz data\n      console.log('Quiz submitted!');\n    }\n  };\n\n  // Auto-submit quiz when time runs out\n  useEffect(() => {\n    if (remainingTime === 0) {\n      handleSubmitQuiz();\n    }\n  }, [remainingTime]);\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Attempt Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Remaining Time: \", formatTime(remainingTime)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), quizData.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: `option_${index}_${optionIndex}`,\n          name: `question_${index}`,\n          checked: selectedOptions[index] === optionIndex,\n          onChange: () => handleOptionSelect(index, optionIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `option_${index}_${optionIndex}`,\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, this))]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitQuiz,\n      children: \"Submit Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(AttemptQuiz, \"yyjAQPXrCrKFhVUOfWtPSOct7XM=\");\n_c = AttemptQuiz;\nexport default AttemptQuiz;\nvar _c;\n$RefreshReg$(_c, \"AttemptQuiz\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AttemptQuiz","_s","quizData","id","question","options","correctAnswer","selectedOptions","setSelectedOptions","Array","length","fill","remainingTime","setRemainingTime","timer","setInterval","prevTime","clearInterval","handleOptionSelect","questionIndex","optionIndex","updatedSelectedOptions","handleSubmitQuiz","console","log","window","confirm","formatTime","time","minutes","Math","floor","seconds","toString","padStart","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","option","type","name","checked","onChange","htmlFor","onClick","_c","$RefreshReg$"],"sources":["D:/QuizMaster/Frontend/myproject/src/components/AttemptQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AttemptQuiz = () => {\r\n    // Sample quiz data (replace with your actual quiz data)\r\n    const quizData = [\r\n        {\r\n            id: 1,\r\n            question: 'Sample Question 1',\r\n            options: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\r\n            correctAnswer: 2 // Index of the correct answer in the options array\r\n        },\r\n        {\r\n            id: 2,\r\n            question: 'Sample Question 2',\r\n            options: ['Option A', 'Option B', 'Option C', 'Option D'],\r\n            correctAnswer: 1\r\n        }\r\n        // Add more quiz questions as needed\r\n    ];\r\n\r\n    const [selectedOptions, setSelectedOptions] = useState(Array(quizData.length).fill(null));\r\n    const [remainingTime, setRemainingTime] = useState(30 * 60); // 30 minutes in seconds\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setRemainingTime(prevTime => prevTime - 1);\r\n        }, 1000);\r\n\r\n        return () => clearInterval(timer);\r\n    }, []);\r\n\r\n    const handleOptionSelect = (questionIndex, optionIndex) => {\r\n        const updatedSelectedOptions = [...selectedOptions];\r\n        updatedSelectedOptions[questionIndex] = optionIndex;\r\n        setSelectedOptions(updatedSelectedOptions);\r\n    };\r\n\r\n    const handleSubmitQuiz = () => {\r\n        // Perform submission logic here\r\n        console.log('Submitting quiz...');\r\n        // Show confirmation popup\r\n        if (window.confirm('Are you sure you want to submit the quiz?')) {\r\n            // Submit quiz data\r\n            console.log('Quiz submitted!');\r\n        }\r\n    };\r\n\r\n    // Auto-submit quiz when time runs out\r\n    useEffect(() => {\r\n        if (remainingTime === 0) {\r\n            handleSubmitQuiz();\r\n        }\r\n    }, [remainingTime]);\r\n\r\n    const formatTime = (time) => {\r\n        const minutes = Math.floor(time / 60);\r\n        const seconds = time % 60;\r\n        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Attempt Quiz</h2>\r\n            <p>Remaining Time: {formatTime(remainingTime)}</p>\r\n            {quizData.map((question, index) => (\r\n                <div key={question.id}>\r\n                    <p>{question.question}</p>\r\n                    {question.options.map((option, optionIndex) => (\r\n                        <div key={optionIndex}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                id={`option_${index}_${optionIndex}`}\r\n                                name={`question_${index}`}\r\n                                checked={selectedOptions[index] === optionIndex}\r\n                                onChange={() => handleOptionSelect(index, optionIndex)}\r\n                            />\r\n                            <label htmlFor={`option_${index}_${optionIndex}`}>{option}</label>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n            <button onClick={handleSubmitQuiz}>Submit Quiz</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AttemptQuiz;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}