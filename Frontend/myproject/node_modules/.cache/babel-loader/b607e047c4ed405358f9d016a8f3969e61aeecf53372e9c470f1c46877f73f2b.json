{"ast":null,"code":"var _jsxFileName = \"D:\\\\QuizMaster\\\\Frontend\\\\myproject\\\\src\\\\components\\\\AttemptQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AttemptQuiz = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [remainingTime, setRemainingTime] = useState(60);\n  const fetchQuizData = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/viewQuiz');\n      if (!response.ok) {\n        throw new Error('Failed to fetch quiz data');\n      }\n      const data = await response.json();\n      setQuestions(data);\n      // Initialize selectedOptions state with default values\n      const initialSelectedOptions = {};\n      data.forEach(question => {\n        initialSelectedOptions[question.id] = null;\n      });\n      setSelectedOptions(initialSelectedOptions);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n  const handleOptionSelect = (questionId, optionIndex) => {\n    setSelectedOptions(prevSelectedOptions => ({\n      ...prevSelectedOptions,\n      [questionId]: optionIndex\n    }));\n  };\n  const handleSubmitQuiz = () => {\n    // Perform submission logic here\n    console.log('Submitting quiz...');\n    // Show confirmation popup\n    if (window.confirm('Are you sure you want to submit the quiz?')) {\n      // Submit quiz data along with selected answers\n      console.log('Quiz submitted with answers:', selectedOptions);\n    }\n  };\n  useEffect(() => {\n    if (remainingTime === 0) {\n      handleSubmitQuiz();\n    }\n  }, [remainingTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-5\",\n      children: \"Attempt Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Remaining Time: \", remainingTime, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), questions && questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-check\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: `option_${question.id}_${optionIndex}`,\n          className: \"form-check-input\",\n          name: `question_${question.id}`,\n          checked: selectedOptions[question.id] === optionIndex,\n          onChange: () => handleOptionSelect(question.id, optionIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `option_${question.id}_${optionIndex}`,\n          className: \"form-check-label\",\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this)]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this))]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleSubmitQuiz,\n      children: \"Submit Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(AttemptQuiz, \"x3y+XNCTgTM9Ku6efwumiWHrF8Q=\");\n_c = AttemptQuiz;\nexport default AttemptQuiz;\nvar _c;\n$RefreshReg$(_c, \"AttemptQuiz\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AttemptQuiz","_s","questions","setQuestions","selectedOptions","setSelectedOptions","remainingTime","setRemainingTime","fetchQuizData","response","fetch","ok","Error","data","json","initialSelectedOptions","forEach","question","id","error","console","handleOptionSelect","questionId","optionIndex","prevSelectedOptions","handleSubmitQuiz","log","window","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","options","option","type","name","checked","onChange","htmlFor","onClick","_c","$RefreshReg$"],"sources":["D:/QuizMaster/Frontend/myproject/src/components/AttemptQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AttemptQuiz = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [selectedOptions, setSelectedOptions] = useState({});\r\n    const [remainingTime, setRemainingTime] = useState(60);\r\n\r\n    const fetchQuizData = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/viewQuiz');\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch quiz data');\r\n            }\r\n            const data = await response.json();\r\n            setQuestions(data);\r\n            // Initialize selectedOptions state with default values\r\n            const initialSelectedOptions = {};\r\n            data.forEach(question => {\r\n                initialSelectedOptions[question.id] = null;\r\n            });\r\n            setSelectedOptions(initialSelectedOptions);\r\n        } catch (error) {\r\n            console.error('Error fetching questions:', error);\r\n        }\r\n    };\r\n\r\n    const handleOptionSelect = (questionId, optionIndex) => {\r\n        setSelectedOptions(prevSelectedOptions => ({\r\n            ...prevSelectedOptions,\r\n            [questionId]: optionIndex\r\n        }));\r\n    };\r\n\r\n    const handleSubmitQuiz = () => {\r\n        // Perform submission logic here\r\n        console.log('Submitting quiz...');\r\n        // Show confirmation popup\r\n        if (window.confirm('Are you sure you want to submit the quiz?')) {\r\n            // Submit quiz data along with selected answers\r\n            console.log('Quiz submitted with answers:', selectedOptions);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (remainingTime === 0) {\r\n            handleSubmitQuiz();\r\n        }\r\n    }, [remainingTime]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 className=\"mt-5\">Attempt Quiz</h2>\r\n            <p>Remaining Time: {remainingTime} seconds</p>\r\n            {questions && questions.map(question => (\r\n                <div key={question.id} className=\"mb-3\">\r\n                    <p>{question.question}</p>\r\n                    {question.options.map((option, optionIndex) => (\r\n                        <div key={optionIndex} className=\"form-check\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                id={`option_${question.id}_${optionIndex}`}\r\n                                className=\"form-check-input\"\r\n                                name={`question_${question.id}`}\r\n                                checked={selectedOptions[question.id] === optionIndex}\r\n                                onChange={() => handleOptionSelect(question.id, optionIndex)}\r\n                            />\r\n                            <label htmlFor={`option_${question.id}_${optionIndex}`} className=\"form-check-label\">{option}</label>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n            <button className=\"btn btn-primary\" onClick={handleSubmitQuiz}>Submit Quiz</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AttemptQuiz;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}