{"ast":null,"code":"var _jsxFileName = \"D:\\\\QuizMaster\\\\Frontend\\\\myproject\\\\src\\\\components\\\\StartQuiz.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState, useEffect } from 'react';\n\n// export default function StartQuiz(){\n//     const [remainingTime, setRemainingTime] = useState(30 * 60); \n//     const [examStarted, setExamStarted] = useState(false);\n//     const [quizData, setQuizData] = useState([]);\n\n//     useEffect(() => {\n//         if (examStarted) {\n//             fetchQuizData();\n//             const timer = setInterval(() => {\n//                 setRemainingTime(prevTime => prevTime - 1);\n//             }, 1000);\n\n//             return () => clearInterval(timer);\n//         }\n//     }, [examStarted]);\n//     const handleSubmitQuiz = () => {\n//         console.log('Submitting quiz...');\n//         if (window.confirm('Are you sure you want to submit the quiz?')) {\n//             console.log('Quiz submitted with answers:', selectedOptions);\n//         }\n//     };\n\n//     const formatTime = (time) => {\n//         const minutes = Math.floor(time / 60);\n//         const seconds = time % 60;\n//         return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n//     };\n\n//     const fetchQuizData = () => {\n//         fetch(`http://localhost:8080/viewQuizBy?cat_id=${selectedCategory}&subject_id=${selectedSubject}`)\n//         .then(resp => {\n//             if (resp.ok)\n//                 return resp.json();\n//             else\n//                 throw new Error(\"Server error\");\n//         })\n//         .then(data => {\n//             setQuizData(data);\n//             setSelectedOptions(Array(data.length).fill(null));\n//         })\n//         .catch(error => {\n//             console.error('Error fetching quiz questions:', error);\n//         });\n//     };\n//     return(\n//         <div>\n//              {examStarted && (\n//     <div>\n//         <p>Remaining Time: {formatTime(remainingTime)}</p>\n//         {quizData && quizData.map((question, index) => (\n//             <div key={question.id}>\n//                 <p>{question.question_text}</p>\n//                 <div>\n//                     <input\n//                         type=\"radio\"\n//                         id={`option_${index}_1`}\n//                         name={`question_${index}`}\n//                         value={question.option1}\n//                         checked={selectedOptions[index] === 0} \n//                         onChange={() => handleOptionSelect(index, 0)}\n//                     />\n//                     <label htmlFor={`option_${index}_1`}>{question.option1}</label>\n//                 </div>\n//                 <div>\n//                     <input\n//                         type=\"radio\"\n//                         id={`option_${index}_2`}\n//                         name={`question_${index}`}\n//                         value={question.option2}\n//                         checked={selectedOptions[index] === 1} \n//                         onChange={() => handleOptionSelect(index, 1)}\n//                     />\n//                     <label htmlFor={`option_${index}_2`}>{question.option2}</label>\n//                 </div>\n//                 <div>\n//                     <input\n//                         type=\"radio\"\n//                         id={`option_${index}_3`}\n//                         name={`question_${index}`}\n//                         value={question.option3}\n//                         checked={selectedOptions[index] === 2}\n//                         onChange={() => handleOptionSelect(index, 2)}\n//                     />\n//                     <label htmlFor={`option_${index}_3`}>{question.option3}</label>\n//                 </div>\n//                 <div>\n//                     <input\n//                         type=\"radio\"\n//                         id={`option_${index}_4`}\n//                         name={`question_${index}`}\n//                         value={question.option4}\n//                         checked={selectedOptions[index] === 3} \n//                         onChange={() => handleOptionSelect(index, 3)}\n//                     />\n//                     <label htmlFor={`option_${index}_4`}>{question.option4}</label>\n//                 </div>\n//             </div>\n//         ))}\n//     </div>\n// )}\n//         <button onClick={handleSubmitQuiz}>Submit Quiz</button>\n\n//         </div>\n//     );\n// }\n\nexport default function StartQuiz() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_c = StartQuiz;\nvar _c;\n$RefreshReg$(_c, \"StartQuiz\");","map":{"version":3,"names":["StartQuiz","_jsxDEV","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/QuizMaster/Frontend/myproject/src/components/StartQuiz.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// export default function StartQuiz(){\r\n//     const [remainingTime, setRemainingTime] = useState(30 * 60); \r\n//     const [examStarted, setExamStarted] = useState(false);\r\n//     const [quizData, setQuizData] = useState([]);\r\n\r\n\r\n//     useEffect(() => {\r\n//         if (examStarted) {\r\n//             fetchQuizData();\r\n//             const timer = setInterval(() => {\r\n//                 setRemainingTime(prevTime => prevTime - 1);\r\n//             }, 1000);\r\n\r\n//             return () => clearInterval(timer);\r\n//         }\r\n//     }, [examStarted]);\r\n//     const handleSubmitQuiz = () => {\r\n//         console.log('Submitting quiz...');\r\n//         if (window.confirm('Are you sure you want to submit the quiz?')) {\r\n//             console.log('Quiz submitted with answers:', selectedOptions);\r\n//         }\r\n//     };\r\n\r\n//     const formatTime = (time) => {\r\n//         const minutes = Math.floor(time / 60);\r\n//         const seconds = time % 60;\r\n//         return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n//     };\r\n\r\n//     const fetchQuizData = () => {\r\n//         fetch(`http://localhost:8080/viewQuizBy?cat_id=${selectedCategory}&subject_id=${selectedSubject}`)\r\n//         .then(resp => {\r\n//             if (resp.ok)\r\n//                 return resp.json();\r\n//             else\r\n//                 throw new Error(\"Server error\");\r\n//         })\r\n//         .then(data => {\r\n//             setQuizData(data);\r\n//             setSelectedOptions(Array(data.length).fill(null));\r\n//         })\r\n//         .catch(error => {\r\n//             console.error('Error fetching quiz questions:', error);\r\n//         });\r\n//     };\r\n//     return(\r\n//         <div>\r\n//              {examStarted && (\r\n//     <div>\r\n//         <p>Remaining Time: {formatTime(remainingTime)}</p>\r\n//         {quizData && quizData.map((question, index) => (\r\n//             <div key={question.id}>\r\n//                 <p>{question.question_text}</p>\r\n//                 <div>\r\n//                     <input\r\n//                         type=\"radio\"\r\n//                         id={`option_${index}_1`}\r\n//                         name={`question_${index}`}\r\n//                         value={question.option1}\r\n//                         checked={selectedOptions[index] === 0} \r\n//                         onChange={() => handleOptionSelect(index, 0)}\r\n//                     />\r\n//                     <label htmlFor={`option_${index}_1`}>{question.option1}</label>\r\n//                 </div>\r\n//                 <div>\r\n//                     <input\r\n//                         type=\"radio\"\r\n//                         id={`option_${index}_2`}\r\n//                         name={`question_${index}`}\r\n//                         value={question.option2}\r\n//                         checked={selectedOptions[index] === 1} \r\n//                         onChange={() => handleOptionSelect(index, 1)}\r\n//                     />\r\n//                     <label htmlFor={`option_${index}_2`}>{question.option2}</label>\r\n//                 </div>\r\n//                 <div>\r\n//                     <input\r\n//                         type=\"radio\"\r\n//                         id={`option_${index}_3`}\r\n//                         name={`question_${index}`}\r\n//                         value={question.option3}\r\n//                         checked={selectedOptions[index] === 2}\r\n//                         onChange={() => handleOptionSelect(index, 2)}\r\n//                     />\r\n//                     <label htmlFor={`option_${index}_3`}>{question.option3}</label>\r\n//                 </div>\r\n//                 <div>\r\n//                     <input\r\n//                         type=\"radio\"\r\n//                         id={`option_${index}_4`}\r\n//                         name={`question_${index}`}\r\n//                         value={question.option4}\r\n//                         checked={selectedOptions[index] === 3} \r\n//                         onChange={() => handleOptionSelect(index, 3)}\r\n//                     />\r\n//                     <label htmlFor={`option_${index}_4`}>{question.option4}</label>\r\n//                 </div>\r\n//             </div>\r\n//         ))}\r\n//     </div>\r\n// )}\r\n//         <button onClick={handleSubmitQuiz}>Submit Quiz</button>\r\n\r\n//         </div>\r\n//     );\r\n// }\r\n\r\nexport default function StartQuiz(){\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,SAASA,SAASA,CAAA,EAAE;EAC/B,oBACIC,OAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEd;AAACC,EAAA,GANuBN,SAAS;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}